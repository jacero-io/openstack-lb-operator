version: '3'

includes:
  utils:
    taskfile: utils.yaml
    internal: true

vars:
  CONTAINER_TOOL: '{{.CONTAINER_TOOL | default "docker"}}'
  BUILDER_NAME: "project-v3-builder"

tasks:
  test-e2e-prepare:
    desc: Prepare for e2e tests
    cmds:
      - mkdir -p hack/e2e
      - |
        cat > hack/e2e/prepare-kind.sh << 'EOF'
        #!/bin/bash
        set -o errexit
        set -o nounset
        set -o pipefail

        # Build the operator image for e2e tests
        echo "Building operator image..."
        DOCKER_BUILDKIT=1 docker build . -t example.com/openstack-lb-operator:test

        # Load the image into kind
        echo "Loading image into kind..."
        kind load docker-image example.com/openstack-lb-operator:test

        # Update kustomization to use local image
        echo "Updating kustomization..."
        sed -i.bak 's|ghcr.io/jacero-io/openstack-lb-operator:v0.0.0-latest|example.com/openstack-lb-operator:test|g' config/manager/manager.yaml

        echo "Image prepared for e2e tests successfully!"
        EOF
      - chmod +x hack/e2e/prepare-kind.sh
      - hack/e2e/prepare-kind.sh

  test-e2e-clean:
    desc: Clean up after e2e tests
    cmds:
      - |
        # Restore original kustomization
        if [ -f config/manager/manager.yaml.bak ]; then
          mv config/manager/manager.yaml.bak config/manager/manager.yaml
        fi
      - rm -rf hack/e2e

  test:
    desc: Run unit tests with coverage (excluding e2e tests)
    deps: [utils:envtest]
    cmds:
      - |
        echo "Running unit tests with envtest..."
        export KUBEBUILDER_ASSETS="$({{.SETUP_ENVTEST_CMD}} use -p path {{.ENVTEST_K8S_VERSION}})"
        # Use -short flag and exclude test/e2e/ directory
        go test -v -coverprofile=coverage.out $(go list ./... | grep -v /test/e2e/)
        go tool cover -func=coverage.out
    env:
      KUBECONFIG: '{{.KUBECONFIG}}'

  test-e2e:
    desc: Run e2e tests with proper test image
    deps: [test-e2e-prepare]
    cmds:
      - |
        # Set KUBECONFIG environment variable instead of passing as flag
        go test -v -tags=e2e ./test/e2e/...
    env:
      KUBECONFIG: '{{.KUBECONFIG}}'
    finally:
      - task: test-e2e-clean

  generate:
    desc: Generate code
    cmds:
      - '{{.CONTROLLER_GEN_CMD}} object:headerFile="{{.ROOT_DIR}}/hack/boilerplate.go.txt" paths="{{.ROOT_DIR}}/..."'
    sources:
      - '{{.ROOT_DIR}}/api/**/*.go'
    generates:
      - '{{.ROOT_DIR}}/api/**/zz_generated.*.go'
    deps:
      - utils:controller-gen

  manifests:
    desc: Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects
    cmds:
      - '{{.CONTROLLER_GEN_CMD}} rbac:roleName=manager-role crd webhook paths="{{.ROOT_DIR}}/..." output:crd:artifacts:config={{.ROOT_DIR}}/config/crd/bases'
      - echo "Manifests generated successfully"
    sources:
      - '{{.ROOT_DIR}}/api/**/*.go'
      - '{{.ROOT_DIR}}/internal/**/*.go'
      - '{{.ROOT_DIR}}/config/rbac/**/*.yaml'
    generates:
      - '{{.ROOT_DIR}}/config/crd/bases/*.yaml'
    deps:
      - utils:controller-gen
    silent: true

  build:
    desc: Build the manager binary
    cmds:
      - CGO_ENABLED=0 go build -o {{.ROOT_DIR}}/bin/manager {{.ROOT_DIR}}/cmd/main.go
    sources:
      - '{{.ROOT_DIR}}/api/**/*.go'
      - '{{.ROOT_DIR}}/internal/**/*.go'
      - '{{.ROOT_DIR}}/pkg/**/*.go'
      - '{{.ROOT_DIR}}/cmd/main.go'
    generates:
      - '{{.ROOT_DIR}}/bin/manager'
    deps:
      - manifests
      - generate

  build-installer:
    desc: Generate a consolidated YAML with CRDs and deployment manifests
    deps:
      - utils:ensure-dir
      - manifests
      - generate
      - utils:kustomize
    cmds:
      - '{{.KUSTOMIZE_CMD}} build {{.ROOT_DIR}}/config/default > {{.ROOT_DIR}}/dist/install.yaml'
      - echo "Installer generated successfully"
    silent: true

  docker-build-base:
    internal: true
    cmds:
      - |
        if ! {{.CONTAINER_TOOL}} buildx inspect {{.BUILDER_NAME}} > /dev/null 2>&1; then
          {{.CONTAINER_TOOL}} buildx create --name {{.BUILDER_NAME}} --use
        else
          {{.CONTAINER_TOOL}} buildx use {{.BUILDER_NAME}}
        fi
      - |
        BUILD_ARGS="--tag {{.IMG}} {{.EXTRA_BUILD_ARGS}}"
        if [ "{{.PUSH}}" = "true" ]; then
          echo "Building and pushing {{.BUILD_TYPE}} image..."
          {{.CONTAINER_TOOL}} buildx build $BUILD_ARGS --push {{.ROOT_DIR}}/.
        else
          echo "Building {{.BUILD_TYPE}} image without pushing..."
          {{.CONTAINER_TOOL}} buildx build $BUILD_ARGS --load {{.ROOT_DIR}}/.
        fi
    vars:
      PUSH: '{{.PUSH | default "false"}}'
      EXTRA_BUILD_ARGS: ''
      BUILD_TYPE: 'docker'

  docker-build:
    desc: Build docker image locally
    cmds:
      - task: docker-build-base
        vars:
          BUILD_TYPE: 'amd64'
          PUSH: '{{.PUSH | default "false"}}'
    sources:
      - '{{.ROOT_DIR}}/Dockerfile'
    generates:
      - '{{.IMG}}'
    vars:
      PLATFORMS: "linux/amd64"

  docker-build-multi:
    desc: Build docker image for the manager with cross-platform support
    cmds:
      - task: docker-build-base
        vars:
          BUILD_TYPE: 'multi-platform'
          EXTRA_BUILD_ARGS: '--platform={{.PLATFORMS}}'
    sources:
      - '{{.ROOT_DIR}}/Dockerfile'
    generates:
      - '{{.IMG}}'
    vars:
      PLATFORMS: '{{.PLATFORMS}}'

  package-crds:
    desc: Combine all CRDs into a single file
    deps:
      - manifests
    cmds:
      - |
        # Start with empty file
        : > {{.ROOT_DIR}}/openstack-lb-operator-crds.yaml
        
        # Process each CRD file
        for file in {{.ROOT_DIR}}/config/crd/bases/*.yaml; do
          # Add separator between documents if not the first file
          if [ -s {{.ROOT_DIR}}/openstack-lb-operator-crds.yaml ]; then
            echo "---" >> {{.ROOT_DIR}}/openstack-lb-operator-crds.yaml
          fi
          
          # Add file content maintaining proper YAML structure
          cat $file >> {{.ROOT_DIR}}/openstack-lb-operator-crds.yaml
        done
        
        echo "Successfully generated openstack-lb-operator-crds.yaml"
    generates:
      - '{{.ROOT_DIR}}/openstack-lb-operator-crds.yaml'


  helm-chart:
    desc: Generate Helm chart from CRDs and manifests
    deps: 
      - manifests
      - utils:kustomize
      - utils:helmify
    cmds:
      - mkdir -p {{.ROOT_DIR}}/charts
      - |
        echo "Generating Helm chart from manifests..."
        {{.KUSTOMIZE_CMD}} build {{.ROOT_DIR}}/config/default | {{.HELMIFY_CMD}} -crd-dir {{.ROOT_DIR}}/charts
        
        # Add the CA certificates values to the generated chart
        if [ -f {{.ROOT_DIR}}/hack/helmify-values.yaml ]; then
          echo "Merging custom values into chart..."
          # Append our CA cert values to the generated values.yaml
          cat {{.ROOT_DIR}}/hack/helmify-values.yaml >> {{.ROOT_DIR}}/charts/values.yaml
        fi
      - echo "Helm chart generated successfully at {{.ROOT_DIR}}/charts"
    generates:
      - '{{.ROOT_DIR}}/charts/Chart.yaml'
      - '{{.ROOT_DIR}}/charts/values.yaml'
      - '{{.ROOT_DIR}}/charts/templates'
